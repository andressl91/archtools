
######## STL ########
# Includes
snippet inc "include iostream"
#include <${1:iostream}>
$2
endsnippet

snippet incs "include iostream"
#include <iostream>
$1
endsnippet

snippet incv "include vector"
#include <vector>
$1
endsnippet

snippet incm "include memory"
#include <memory>
$1
endsnippet

snippet inca "include algorithm"
#include <algorithm>
$1
endsnippet

snippet incmap "include map"
#include <map>
$1
endsnippet

#Cout
snippet cout "std::cout"
std::cout << ${1:} << std::endl;
$2
endsnippet


## STL Memory
# Smart Pointers

snippet sp "shared_ptr"
std::shared_ptr<${1:T}> ${2};
endsnippet

snippet msp "Make shared_ptr"
std::shared_ptr<${1}> ${2} = std::make_shared<$1>(${3});
endsnippet

snippet amsp "Auto make shared_ptr"
auto ${1} = std::make_shared<${2}>(${3});
endsnippet

snippet up "unique_ptr"
std::unique_ptr<${1:T}> ${2};
endsnippet

snippet mup "Make unique_ptr"
std::unique_ptr<${1}> ${2} = std::make_unique<$1>(${3});
endsnippet

snippet amup "Auto make unique_ptr"
auto ${1} = std::make_unique<${2}>(${3});
endsnippet

## STL Containers
# Vector
snippet dvec "declare STL vector, default T"
std::vector<${1:T}> $2;
$3
endsnippet

snippet vec "define STL vector, default T"
std::vector<${1:T}> $2 = $3
$3
endsnippet

# Map
snippet strmap "STL map, default T"
std::map<${1:std::string}, ${2:T}> $3;
endsnippet

snippet map "STL map, default T"
std::map<${1:Key}, ${2:T}> $3;
$4
endsnippet
##

## STL Algorithms
snippet find "STL find" 
auto find_res = std::find(${1:}.begin(), $1.end(), $2);
endsnippet

##

### Template
snippet temp "Template function"
template <typename ${1:T}>
$2
endsnippet


##

## Boost
# Includes
snippet bi "include memory"
#include <boost/${1:}}>
endsnippet


## Structs
snippet bstuct
struct $1 {
	
	$1()

};
endsnippet

## Structs
snippet sfoo "FooStruct"
struct $1 {
	int x;
	$1(int i) : x{i} {} 
};

$2
endsnippet

# Templated Struct
snippet temp "Template function"
template <typename ${1:T}>
struct $1 {
	$1() = default();
};
endsnippet

## Functions

snippet func "Basic func"
${1:void} ${2:my_function}(${3:}) {
$4
}
endsnippet

snippet main "create basic main function"
int main(int argc, char** argv) {
	$1
	return 0;
}
endsnippet

